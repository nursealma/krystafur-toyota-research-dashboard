{"version":3,"sources":["firebase.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Weather","this","props","city","country","temperature","description","React","Component","App","handleChange","event","setState","target","name","value","handleClick","preventDefault","database","ref","push","state","userInput","deleteBookmark","bookmarkId","child","remove","getWeather","e","a","fetch","api_call","json","data","sys","main","temp","weather","changeWikiSearchTerms","wikiSearchTerms","useWikiSearchEngine","pointerToThis","url","params","action","list","srsearch","format","Object","keys","forEach","key","then","response","query","search","wikiSearchReturnValues","queryResultPageFullURL","queryResultPageID","pageid","queryResultPageTitle","title","queryResultPageSnippet","snippet","key2","page","pageID","urlForRetrievingPageURLByPageID","pages","fullurl","forceUpdate","bookmarks","undefined","on","newState","val","id","wikiSearchResults","key3","console","log","className","href","dangerouslySetInnerHTML","__html","type","onChange","onClick","map","bookmark","onSubmit","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb9a5e4c.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n  const firebaseConfig = {\n    apiKey: \"AIzaSyB8ba9uHk5_K9sJaxXejBFESn7R1r6AZOE\",\n    authDomain: \"krystafur-toyota-project-five.firebaseapp.com\",\n    databaseURL: \"https://krystafur-toyota-project-five.firebaseio.com\",\n    projectId: \"krystafur-toyota-project-five\",\n    storageBucket: \"krystafur-toyota-project-five.appspot.com\",\n    messagingSenderId: \"1039705567044\",\n    appId: \"1:1039705567044:web:4ce84acd11df7e34bef111\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from \"react\";\n\nclass Weather extends React.Component {\n\n    render(){ //\n        return(\n             <ul>\n                <li>\n                    {this.props.city}\n                </li>\n                <li>\n                    {this.props.country}\n                </li>\n                <li>\n                    {this.props.temperature} \n                </li>\n                <li>\n                    {this.props.description}\n                </li>\n             </ul>\n        )\n    }\n}\nexport default Weather;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport './App.css';\nimport Weather from \"./components/Weather.js\";\n\n\nconst API_KEY = \"32853ecb0236dbf633462c2c86626029\"; //weather\n// const API_KEY2 = \"AIzaSyBsBVRAi5jeJZ013mXKIxde_wZretysOUk\"; //youtube\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      bookmarks: [], //bookmarks props\n      userInput: '', //bookmark props\n      city: undefined, //weather proprs\n      country: undefined, //weather props\n      temperature: undefined, //weather props\n      description: undefined, //weather props\n      wikiSearchReturnValues: [], //wiki props\n      wikiSearchTerms: '', //wiki props\n    };\n  }\n\n  \n  componentDidMount(){\n    const dbRef = firebase.database().ref(); //bookmark database\n    dbRef.on('value', (response) => {\n      const newState = []\n      const data = response.val();\n      for (let key in data) {\n        newState.push({\n          title: data[key],\n        id: key,\n      });\n    }\n    \n    this.setState({\n      bookmarks: newState,\n    });\n  });\n}\n\nhandleChange = (event) => { //alert react to changes/update bookmark input\n  this.setState({\n    [event.target.name]: event.target.value\n  })\n};\n\nhandleClick = (event) => { // submit userinput to bookmark database, clear string\n  event.preventDefault();\n  const dbRef = firebase.database().ref();\n  dbRef.push(this.state.userInput);\n  this.setState({\n    userInput: '',\n  });\n};\n\ndeleteBookmark = (bookmarkId) => { // tell firebase to delete bookmark based on unique ID\n  const dbRef = firebase.database().ref();\n  dbRef.child(bookmarkId).remove();\n}\n\ngetWeather = async(e) => { // weather widgit\n  e.preventDefault();\n  const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=toronto,canada&APPID=${API_KEY}&units=metric`); //fetch toronto weather from api\n  const data = await api_call.json(); //api call response stored in variable\n  this.setState({\n    city: data.name,\n    country: data.sys.country,\n    temperature: data.main.temp,\n    description: data.weather[0].description\n  })\n}\n\n//this wikipedia component's method was largely taken and tweaked from youtube video \"making wikipedia api call with react\"\n\nchangeWikiSearchTerms = (e) => { //alert react to changes/update wiki input\n  this.setState({\n    wikiSearchTerms: e.target.value\n  });\n}\n\nuseWikiSearchEngine = (e) => {\n  e.preventDefault();\n\n  const pointerToThis = this; \n  let url = \"https://en.wikipedia.org/w/api.php\"\n  let params = {\n    action: 'query',\n    list: 'search',\n    srsearch: this.state.wikiSearchTerms,\n    format: 'json', \n  };\n  url = url + '?origin=*';\n  Object.keys(params).forEach((key) => {\n    url += \"&\" + key + \"=\" + params[key];\n  });\n\n  fetch(url)\n    .then(\n      function (response) {\n        return response.json();\n      }\n    )\n    .then(\n      function (response) {\n    \n        for (let key in response.query.search) {\n          pointerToThis.state.wikiSearchReturnValues.push({\n            queryResultPageFullURL: 'no link',\n            queryResultPageID: response.query.search[key].pageid,\n            queryResultPageTitle: response.query.search[key].title,\n            queryResultPageSnippet: response.query.search[key].snippet\n          });\n        } \n      }\n    )\n    .then(\n      function (response) {\n        for (let key2 in pointerToThis.state.wikiSearchReturnValues) {\n          let page = pointerToThis.state.wikiSearchReturnValues[key2];\n          let pageID = page.queryResultPageID;\n          let urlForRetrievingPageURLByPageID = `https://en.wikipedia.org/w/api.php?origin=*&action=query&prop=info&pageids=${pageID}&inprop=url&format=json`;\n\n          fetch(urlForRetrievingPageURLByPageID)\n            .then(\n              function (response) {\n                return response.json()\n              }\n            )\n            .then(\n              function (response) {\n      \n                page.queryResultPageFullURL = response.query.pages[pageID].fullurl;\n\n                pointerToThis.forceUpdate();\n              }\n            )\n        }\n      }\n    )\n}\n\nrender() {\n  let wikiSearchResults = [];\n  console.log(this.state.wikiSearchReturnValues);\n\n  for (let key3 in this.state.wikiSearchReturnValues) {\n    wikiSearchResults.push(\n      <div className=\"searchResult\" key={key3}>\n        <h3><a href={this.state.wikiSearchReturnValues[key3].queryResultPageFullURL}>{this.state.wikiSearchReturnValues[key3].queryResultPageTitle}</a></h3>\n        <p className=\"wikiDescription\" dangerouslySetInnerHTML={{__html: this.state.wikiSearchReturnValues[key3].queryResultPageSnippet}}></p>      \n    </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Blog Research Dashboard</h1>\n\n\n      <div className=\"bookmarks\">\n          <form>\n            <input\n              type=\"text\"\n              value={this.state.userInput}\n              name=\"userInput\"\n              onChange={this.handleChange}\n            />\n            <button onClick={this.handleClick}>add link</button>\n          </form>\n          <ul>\n            {this.state.bookmarks.map((bookmark) => {\n              return (\n              <li key={bookmark.id}>\n                <a href={bookmark.title}>{bookmark.title}</a>\n                <button onClick={() => this.deleteBookmark(bookmark.id)}>Delete</button>\n              </li>\n            );\n            })}\n          </ul>\n      </div>\n\n\n      <div className=\"torontoWeather\">\n        <form onSubmit={this.getWeather}>\n          <button>get weather</button>\n        </form>\n          <Weather\n            temperature={this.state.temperature}\n            city={this.state.city}\n            country={this.state.country}\n            description={this.state.description}\n        />\n      </div>\n      \n      <div className=\"wikipedia\"> \n        <form action=\"\">\n          <input type=\"text\" value={this.state.wikiSearchTerms} onChange={this.changeWikiSearchTerms} placeholder='search wiki articles'/>\n          <button type='submit' onClick={this.useWikiSearchEngine}>search</button>\n        </form>\n        {wikiSearchResults}\n      </div>\n\n    </div>\n    );   \n  };\n\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}